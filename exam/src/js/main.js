(function () {
  'use strict';

  /* Все файлы должны собираться с помощью Gulp.
   Использовать css препроцессор на ваш выбор.
   Применить BEM, без фанатизма.
   Достаточно использование конвенции именования и минимального использования подхода блок\элемент для идентичных частей интерфейса.
   Использовать понятные человеку имена классов описывающие елемент интерфейса.
   Гайд по именованию можно почитать тут https://github.com/yoksel/common-words .
   Не может быть имен классов вроде text-1, sublink-2 и тому подобного, помним о BEM.
   Использовать модульную сетку для верстки, любую, на ваш выбор.
   Никакого Bootstrap или Pure, из фреймворков можно использовать только сетки.
   Верстка должна быть responsive, там есть три макета для разных девайсов. Подход только mobile-first.
   Подключить нестандартные шрифты, сами файлы есть в папке fonts. Можно использовать Google Fonts.
   Настроить сжатие картинок с помощью сборщика
   Максимально использовать возможности HTML5, верстка должна быть максимально семантическая.
   Все иконки заменить на SVG аналоги. Искать иконки можно тут
   На макете есть слайдеры, их нужно сделать с помощью jQuery-плагина на ваш выбор.
   Это 3 разных слайдера, просто они похожи. В каждом из них одинаковые слайды, которые прокручиваются.
   При нажатии на стрелки слайдер должен прокручиваться в верном “направлении”.
   В нижней части макета есть блок картинок (будем называть его плиткой) с заголовком "Discover holiday activity ideas".
   Их нужно расположить с помощью плагина Masonry, либо с помощью Isotope, либо взять любой другой аналог
   Сами картинки нужно взять с помощью ajax-запроса с любого сервиса для поиска картинок
   После блока "плитки" есть поле поиска.
   При введении в поле текста и нажатии кнопки "Search partners" нужно отправить запрос на получение картинок с сервиса картинок,
   и заменить картинки в плитке на новые, соответствующие нашему запросу. Можно использовать шаблонизатор и заново проинициализировать masonry.
   В качестве текста для каждой картинки использовать описание картинки которое пришло от сервера, если описание длинной то обрезать до одной строки.
   При первой загрузке страницы в плитке должны выводиться случайные картинки.
   Кроссбраузерность для Chrome, Firefox и Edge последних версий.
   Применить подход Progressive Enhancement.

   Бонусное задание:
   Сделать svg спрайты с помощью сборщика
   Сделать поддержку ретины для контентных jpg изображений вроде промо,  картинок слайдера,
   фото людей и картинок в плитке, использовать retina.js или любой аналог на ваш выбор
   Сделать все с помощью чистого js, без использования jQuery. Masonry это позволяет, слайдер без jQuery можно найти
   Пиксельная точность для Chrome. Только внутри элементов интерфейса. Блоки ставить на сетку.
   Используя Gulp имитировать модульность приложения, логика слайдеров и плитки должна быть в раздельных файлах.
   После чего сшить все в один scripts.js, чтобы было без конфликтов.
   Максимально использовать шаблонизацию.
   Используя сервис вроде http://myjson.com/ или любой другой аналог,
   вынести данные приложения в отдельный json файл и при помощи ajax запроса забрать его.
   Используя разные части этого json файла составить интерфейс используя шаблонизацию. PS: возможно позже сам приложу ссылку на этот файл.

   Как все будет оцениваться

   За хорошее выполнение первых 18 пунктов можно максимально получить 90 балов, максимально 5 баллов за пункт.
   Балы за пункт могут быть снижены от 5 до 1 в зависимости от качества исполнения задачи.
   За выполнение любых 2-х бонусных заданий можно получить еще 10 баллов. Каждое бонусное оценивается в 5 баллов.
   Работу нельзя будет переделать, это экзамен, поэтому делайте на совесть.
   */

//= partials/slick.js

  $('.slider').slick({
    nextArrow: '<i class="fa fa-angle-right"></i>',
    prevArrow: '<i class="fa fa-angle-left"></i>',
    });

//= partials/imgSearch.js

})();



